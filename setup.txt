Set up a Google Cloud Platform (GCP) project and enable the Google Sheets API:

https://developers.google.com/sheets/api/guides/concepts

1. Visit the GCP Console (https://console.cloud.google.com/).
Create a new project or select an existing one.
Enable the Google Sheets API by navigating to the "APIs & Services" > "Library" section, searching for "Google Sheets API," and enabling it.
Create API credentials:

2. Go to the "APIs & Services" > "Credentials" section.
Click on "Create Credentials" and select "Service Account."
Fill in the necessary details, such as the service account name and role.
Under "Key type," select JSON and click on "Create."
Save the generated JSON key file securely.

3. Share the Spreadsheet with the service account email:

Open your Google Spreadsheet.
Click on the "Share" button and enter the service account email (found in the JSON key file) as a collaborator. Provide it with "Editor" access.

4. Set up the project and install dependencies:

Create a new directory for your project and navigate to it in your terminal.
Initialize a new Node.js project using npm init and follow the prompts.
Install the required dependencies:

npm install googleapis


5. Write code to interact with the Google Sheets API:

Create a new JavaScript file (e.g., write-to-sheets.js) in your project directory.
Import the required modules and load the JSON key file:

const { google } = require('googleapis');
const key = require('./path/to/keyfile.json');

Set up the authentication client and authorize it:

const client = new google.auth.JWT(
  key.client_email,
  null,
  key.private_key,
  ['https://www.googleapis.com/auth/spreadsheets']
);

client.authorize(function (err, tokens) {
  if (err) {
    console.error('Authentication error:', err);
    return;
  }
  // The client is authorized and ready to write to the spreadsheet.
  writeDataToSheet(client);
});

Define the writeDataToSheet function to write data to the spreadsheet:

async function writeDataToSheet(auth) {
  const sheets = google.sheets({ version: 'v4', auth });

  // Specify the spreadsheet ID and range.
  const spreadsheetId = 'YOUR_SPREADSHEET_ID';
  const range = 'Sheet1!A1:B2';

  // Specify the values to write.
  const values = [
    ['Name', 'Age'],
    ['John Doe', 30],
  ];

  try {
    // Write the data to the spreadsheet.
    const response = await sheets.spreadsheets.values.update({
      spreadsheetId,
      range,
      valueInputOption: 'RAW',
      resource: {
        values,
      },
    });

    console.log('Data written successfully.');
  } catch (err) {
    console.error('Error writing data:', err);
  }
}

Replace 'YOUR_SPREADSHEET_ID' with the actual ID of your Google Spreadsheet.

node write-to-sheets.js

6. To find the ID of your Google Spreadsheet, you can follow these steps:

Open the Google Spreadsheet that you want to work with.

Look at the URL in the address bar of your browser. The URL should resemble the following
format:

https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/edit

The SPREADSHEET_ID is the alphanumeric value between the /d/ and /edit segments.

Copy the SPREADSHEET_ID value from the URL. This is the ID of your Google Spreadsheet.

Make sure to replace 'YOUR_SPREADSHEET_ID' in the code example with the actual ID of your Google Spreadsheet.
